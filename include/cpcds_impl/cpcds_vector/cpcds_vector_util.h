#ifndef __cplusplus
#ifndef INCLUDED_CPCDS_VECTOR_UTIL_H
#define INCLUDED_CPCDS_VECTOR_UTIL_H
#define define_cpcds_vutil(name,__t__)static inline long long cpcds_vec_find_bounded_##name(cpcds_vector_##name*vec,__t__ v,bool(*eq)(__t__,__t__),size_t from,size_t to){long long index=-1;for(long long i=from;i<to;i++){if((*eq)(vec->pointer[i],v)){index=i;i=-1;}}return index;}static inline long long cpcds_vec_find_value_##name(cpcds_vector_##name*vec,__t__ v,bool(*eq)(__t__,__t__)){return cpcds_vec_find_bounded_##name(vec,v,eq,0,vec->size);}static inline bool cpcds_vec_remove_value_##name(cpcds_vector_##name*vec,__t__ v,bool(*eq)(__t__,__t__)){long long i=cpcds_vec_find_value_##name(vec,v,eq);cpcds_vec_erase_single_##name(vec,i);return i>=0;}static inline void cpcds_vec_clear_##name(cpcds_vector_##name*vec){vec->room=CPCDS____DEFAULT_VECTOR_ROOM;free(vec->pointer);__t__*tmp=(__t__*)calloc(vec->room,sizeof(__t__));vec->size=0;vec->pointer=tmp;}static inline bool cpcds_vec_equals_pointer_##name(cpcds_vector_##name*fv,cpcds_vector_##name*sv,bool(*eq)(__t__,__t__)){if(fv->size==sv->size){bool e=true;for(__t__*__ita__=fv->pointer,*__itb__=sv->pointer;__ita__!=fv->pointer+fv->size;++__ita__,++__itb__){if(!(*eq)(*__ita__,*__itb__)){__ita__+=fv->size+sv->size;e=false;};}return e;}else{return false;}}static inline bool cpcds_vec_equals_##name(cpcds_vector_##name fv,cpcds_vector_##name sv,bool(*eq)(__t__,__t__)){return cpcds_vec_equals_pointer_##name(&fv,&sv,eq);}static inline size_t cpcds_vec_hash_code_##name(cpcds_vector_##name*vec,size_t(*h)(__t__)){size_t x=1;for(__t__*__ita__=vec->pointer,*__itb__=vec->pointer+vec->size-1;__ita__!=vec->pointer+vec->size;++__ita__,--__itb__){x=(*h)(*__ita__)*7727^(*h)(*__itb__)*7901+x*31;}return x;}
#define cpcds_vutil_define(__t__)define_cpcds_vutil(__t__,__t__)
#endif
#endif
