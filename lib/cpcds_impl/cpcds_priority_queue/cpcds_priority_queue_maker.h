#ifndef __cplusplus
#ifndef INCLUDED_CPCDS_PRIORITY_QUEUE_MAKER_H
#define INCLUDED_CPCDS_PRIORITY_QUEUE_MAKER_H
#define define_cpcds_pqmk(name,__t__,compar)struct cpcds_pq_##name{struct cpcds_vector_##name*bnk;size_t size;};typedef struct cpcds_pq_##name cpcds_pq_##name;void cpcds_pq_sft_down_##name(__t__*arr,size_t ind,size_t size){__t__ t;__s:if(ind*2+2==size){if(!(compar(arr[ind],arr[ind*2+1])<0)){t=arr[ind];arr[ind]=arr[ind*2+1];arr[ind*2+1]=t;}}else if(ind*2+2<size&&(!(compar(arr[ind],arr[ind*2+1])<0)||!(compar(arr[ind],arr[ind*2+2])<0))){if(!(compar(arr[ind],arr[ind*2+1])<0)&&!(compar(arr[ind],arr[ind*2+2])<0)){if(compar(arr[ind*2+1],arr[ind*2+2])<0){t=arr[ind];arr[ind]=arr[ind*2+1];arr[ind*2+1]=t;ind=ind*2+1;}else{t=arr[ind];arr[ind]=arr[ind*2+2];arr[ind*2+2]=t;ind=ind*2+2;}}else if(!(compar(arr[ind],arr[ind*2+2])<0)){t=arr[ind];arr[ind]=arr[ind*2+2];arr[ind*2+2]=t;ind=ind*2+2;}else{t=arr[ind];arr[ind]=arr[ind*2+1];arr[ind*2+1]=t;ind=ind*2+1;}goto __s;}}void cpcds_pq_sft_up_##name(__t__*arr,size_t ind,size_t size){__t__ t;__s:if(ind>0){if(!(compar(arr[(ind-1)/2],arr[ind])<0)){t=arr[ind];arr[ind]=arr[(ind-1)/2];arr[(ind-1)/2]=t;ind=(ind-1)/2;goto __s;}}}void cpcds_pq_mk_hp_##name(__t__*first,__t__*last){__t__*o=last;while(first!=last){--last;cpcds_pq_sft_down_##name(first,last-first,o-first);}}cpcds_pq_##name cpcds_mk_pq_empty_##name(void){cpcds_pq_##name pq;pq.size=0;pq.bnk=(struct cpcds_vector_##name*)malloc(sizeof(struct cpcds_vector_##name));*pq.bnk=cpcds_mk_vec_default_##name();return pq;}cpcds_pq_##name cpcds_mk_pq_array_##name(__t__*first,__t__*last){cpcds_pq_##name pq;pq.bnk=(struct cpcds_vector_##name*)malloc(sizeof(struct cpcds_vector_##name));*pq.bnk=cpcds_mk_vec_array_##name(first,last);cpcds_pq_mk_hp_##name(pq.bnk->pointer,pq.bnk->pointer+pq.bnk->size);pq.size=pq.bnk->size;return pq;}cpcds_pq_##name cpcds_mk_pq_copy_##name(cpcds_pq_##name*pq){cpcds_pq_##name cpy;cpy.bnk=(struct cpcds_vector_##name*)malloc(sizeof(struct cpcds_vector_##name));*cpy.bnk=cpcds_mk_vec_array_##name(pq->bnk->pointer,pq->bnk->pointer+pq->size);cpy.size=pq->size;return cpy;}bool cpcds_pq_empty_##name(cpcds_pq_##name*pq){return pq->size==0;}__t__ cpcds_pq_top_##name(cpcds_pq_##name*pq){return*pq->bnk->pointer;}void cpcds_pq_destr_##name(cpcds_pq_##name*pq){cpcds_vec_destr_##name(pq->bnk);free(pq);}
#define cpcds_pqmk_define(__t__,compar)define_cpcds_pqmk(__t__,__t__,compar)
#endif
#endif
